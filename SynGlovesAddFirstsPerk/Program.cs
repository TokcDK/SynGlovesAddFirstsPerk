using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

namespace SynGlovesAddFirstsPerk
{
    public class Program
    {
        static Lazy<PatcherSettings> Settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("PatcherSettings", "settings.json", out Settings)
                .SetTypicalOpen(GameRelease.SkyrimLE, "SynGlovesAddFirstsPerk.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // fill data for keywords search
            var MaterialKeywordsSearch = new Dictionary<string, List<MaterialFistsKeywordsData>>();
            var FistsKeywordsSearch = new Dictionary<string, List<MaterialFistsKeywordsData>>();
            HashSet<MaterialFistsKeywordsData>? modMaterialFistsList = new(Settings.Value.ModMaterialFists);
            foreach (var data in modMaterialFistsList)
            {
                data.TryAddTo(MaterialKeywordsSearch, true);
                data.TryAddTo(FistsKeywordsSearch, false);
            }

            // search in settings keywords
            foreach (var data in modMaterialFistsList)
            {
                if (data.MaterialKeyword != null && data.MaterialKeyword.TryResolve(state.LinkCache, out var mKeywordGetter) && !string.IsNullOrWhiteSpace(mKeywordGetter.EditorID))
                {
                    if (MaterialKeywordsSearch.ContainsKey(mKeywordGetter.EditorID))
                    {
                        var list = MaterialKeywordsSearch[mKeywordGetter.EditorID];
                        foreach (var d in list)
                        {
                            if (d.MaterialKeyword != null) continue;

                            // set value and remove reference from search list
                            d.MaterialKeyword = data.MaterialKeyword;
                            list.Remove(d);
                        }

                        // remove empty list reference
                        if (list.Count == 0) MaterialKeywordsSearch.Remove(mKeywordGetter.EditorID);
                    }
                }

                if (data.FistsKeyword != null && data.FistsKeyword.TryResolve(state.LinkCache, out var fKeywordGetter) && !string.IsNullOrWhiteSpace(fKeywordGetter.EditorID))
                {
                    if (FistsKeywordsSearch.ContainsKey(fKeywordGetter.EditorID))
                    {
                        var list = FistsKeywordsSearch[fKeywordGetter.EditorID];
                        foreach (var d in list)
                        {
                            if (d.MaterialKeyword != null) continue;

                            // set value and remove reference from search list
                            d.MaterialKeyword = data.MaterialKeyword;
                            list.Remove(d);
                        }

                        // remove empty list reference
                        if (list.Count == 0) FistsKeywordsSearch.Remove(fKeywordGetter.EditorID);
                    }
                }
            }
            // search for mod specific
            //foreach (var modGetter in state.LoadOrder)
            //{
            //    if (modGetter.Value == null) continue;
            //    if (modGetter.Value.Mod == null) continue;

            //    bool isSearchMaterial = ModSpecificMaterialKeywordsSearch.ContainsKey(modGetter.Value.ModKey);
            //    bool isSearchFists = ModSpecificFistsKeywordsSearch.ContainsKey(modGetter.Value.ModKey);
            //    if (isSearchMaterial || isSearchFists)
            //    {
            //        Dictionary<string, List<MaterialFistsKeywordsData>>? matList = isSearchMaterial ? ModSpecificMaterialKeywordsSearch[modGetter.Value.ModKey] : null;
            //        Dictionary<string, List<MaterialFistsKeywordsData>>? fList = isSearchFists ? ModSpecificFistsKeywordsSearch[modGetter.Value.ModKey] : null;
            //        foreach (var keyWordGetter in modGetter.Value.Mod.Keywords)
            //        {
            //            if (string.IsNullOrWhiteSpace(keyWordGetter.EditorID)) continue;

            //            if (isSearchMaterial && matList!.ContainsKey(keyWordGetter.EditorID))
            //            {
            //                var list = matList[keyWordGetter.EditorID];
            //                for (int i = 0; i < list.Count; i++)
            //                {
            //                    var d = list[i];
            //                    if (d.MaterialKeyword != null) continue;

            //                    // set value and remove reference from search list
            //                    d.MaterialKeyword = keyWordGetter.FormKey;
            //                    list.Remove(d);
            //                }

            //                // remove empty list reference
            //                if (list.Count == 0) matList.Remove(keyWordGetter.EditorID);
            //            }
            //            if (isSearchFists && fList!.ContainsKey(keyWordGetter.EditorID))
            //            {
            //                var list = fList[keyWordGetter.EditorID];
            //                for (int i = 0; i < list.Count; i++)
            //                {
            //                    var d = list[i];
            //                    if (d.MaterialKeyword != null) continue;

            //                    // set value and remove reference from search list
            //                    d.MaterialKeyword = keyWordGetter.FormKey;
            //                    list.Remove(d);
            //                }

            //                // remove empty list reference
            //                if (list.Count == 0) fList.Remove(keyWordGetter.EditorID);
            //            }
            //        }
            //    }
            //}
            // search keywords in all
            bool isMatSearch = MaterialKeywordsSearch.Any(d => d.Value.Any(v => (v.MaterialKeyword == default || v.MaterialKeyword.IsNull)));
            bool isFSearch = FistsKeywordsSearch.Any(d => d.Value.Any(v => (v.FistsKeyword == null || v.FistsKeyword.IsNull)));

            if (isMatSearch || isFSearch)
            {
                foreach (var itemGetter in state.LoadOrder.PriorityOrder.Keyword().WinningOverrides())
                {
                    if (string.IsNullOrWhiteSpace(itemGetter.EditorID)) continue;

                    if (isMatSearch && MaterialKeywordsSearch.ContainsKey(itemGetter.EditorID))
                    {
                        var list = MaterialKeywordsSearch[itemGetter.EditorID];
                        for (int i = 0; i < list.Count; i++)
                        {
                            var d = list[i];
                            if (d.MaterialKeyword != null && !d.MaterialKeyword.IsNull) continue;

                            // set value and remove reference from search list
                            d.MaterialKeyword = itemGetter.FormKey;
                            list.Remove(d);
                        }

                        // remove empty list reference
                        if (list.Count == 0) MaterialKeywordsSearch.Remove(itemGetter.EditorID);
                    }
                    if (isFSearch && FistsKeywordsSearch.ContainsKey(itemGetter.EditorID))
                    {
                        var list = FistsKeywordsSearch[itemGetter.EditorID];
                        for (int i = 0; i < list.Count; i++)
                        {
                            var d = list[i];
                            if (d.FistsKeyword != null && !d.FistsKeyword.IsNull) continue;

                            // set value and remove reference from search list
                            d.FistsKeyword = itemGetter.FormKey;
                            list.Remove(d);
                        }

                        // remove empty list reference
                        if (list.Count == 0) FistsKeywordsSearch.Remove(itemGetter.EditorID);
                    }
                }
            }

            // get valid list
            Dictionary<FormLink<IKeywordGetter>, List<MaterialFistsKeywordsData>>? modMaterialFistsListResult = new();
            foreach (var data in modMaterialFistsList)
            {
                if (data.MaterialKeyword == null || data.MaterialKeyword.IsNull || data.FistsKeyword == null || data.FistsKeyword.IsNull) continue;

                if (modMaterialFistsListResult.ContainsKey(data.MaterialKeyword))
                    modMaterialFistsListResult[data.MaterialKeyword].Add(data);
                else
                    modMaterialFistsListResult.Add(data.MaterialKeyword, new List<MaterialFistsKeywordsData>() { data });
            }
            // order by priority
            List<FormLink<IKeywordGetter>> keys = new(modMaterialFistsListResult.Keys);
            foreach (var key in keys)
            {
                var list = modMaterialFistsListResult[key];
                list = list.OrderByDescending(d => d.Priority).ToList();
            }
            modMaterialFistsListResult = modMaterialFistsListResult.OrderByDescending(d => d.Value[0].Priority).ToDictionary(k => k.Key, v => v.Value);

            HashSet<FormLink<IKeywordGetter>> fistsKeywords = new();
            foreach (var d in modMaterialFistsListResult) foreach (var v in d.Value) if (!fistsKeywords.Contains(v.FistsKeyword!)) fistsKeywords.Add(v.FistsKeyword!);

            int patchedCount = 0;
            foreach (var itemGetter in state.LoadOrder.PriorityOrder.Armor().WinningOverrides())
            {
                // skip inavalid
                if (itemGetter.IsDeleted) continue;
                if (itemGetter.MajorFlags.HasFlag(Armor.MajorFlag.NonPlayable)) continue;
                if (itemGetter.MajorFlags.HasFlag(Armor.MajorFlag.Shield)) continue;
                if (itemGetter.BodyTemplate == null) continue;
                if (itemGetter.BodyTemplate.Flags.HasFlag(BodyTemplate.Flag.NonPlayable)) continue;
                if (itemGetter.BodyTemplate.ArmorType == ArmorType.Clothing) continue; // maybe try to parse this variant later?
                if (!itemGetter.BodyTemplate.FirstPersonFlags.HasFlag(BipedObjectFlag.Hands)) continue; // maybe try to parse this variant later?
                if (itemGetter.Keywords == null || itemGetter.Keywords.Count == 0) continue;

                // find material keyword
                FormLink<IKeywordGetter>? foundFormLink = null;
                bool found = false;
                bool alreadyHaveOneOfFistsKeyword = false;
                foreach (var keyword in itemGetter.Keywords) // iterati in order from stronger to weaker
                {
                    if (fistsKeywords.Contains(keyword))
                    {
                        alreadyHaveOneOfFistsKeyword = true;
                        break;
                    }
                    if (!found && modMaterialFistsListResult.ContainsKey(keyword.FormKey))
                    {
                        found = true;
                        var l = modMaterialFistsListResult[keyword.FormKey];
                        foreach (var d in l)
                        {
                            if (d.ArmorTypeToSetFor == -1 || (int)itemGetter.BodyTemplate.ArmorType != d.ArmorTypeToSetFor) continue;

                            foundFormLink = d.FistsKeyword;
                            break;
                        }
                    }
                }

                // skip if not found or fists keyword already exists
                if (alreadyHaveOneOfFistsKeyword || foundFormLink == null || foundFormLink.IsNull || foundFormLink.FormKey == default) continue;

                // add missing fists keyword
                patchedCount++;
                var itemToPatch = state.PatchMod.Armors.GetOrAddAsOverride(itemGetter);
                itemToPatch.Keywords!.Add(foundFormLink); // add fists keyword for the materia
            }

            Console.WriteLine($"Patched {patchedCount} records");
        }
    }
}
